@startuml
autonumber
skinparam packageStyle rect

title Update Patient Profile

actor "Patient" as Patient
participant "UpdateAsync" as UpdateProfile <<component>>
database "Patient Database" as PatientDB <<component>>
database "User Database" as UserDB <<component>>
participant "PatientMapper" as Mapper <<component>>
participant "Email Service" as EmailService <<component>>

Patient -> UpdateProfile : Call UpdateAsync(PatientDto)

== Authorization Checks ==
alt Check if patient exists
    UpdateProfile -> PatientDB : Query patient by RecordNumber
    PatientDB --> UpdateProfile : patientDataModel

    alt Patient not found
        UpdateProfile -> UpdateProfile : Throws Exception("Patient not found.")
    end
else Patient found
    UpdateProfile -> UpdateProfile : Get current user's role and email
    alt User is not Admin and not owner
        UpdateProfile -> UpdateProfile : Throws UnauthorizedAccessException
    end
end

== Update Logic ==
alt User is authorized
    UpdateProfile -> UserDB : Query user by UserId
    UserDB --> UpdateProfile : user

    alt User not found
        UpdateProfile -> UpdateProfile : Throws Exception("User associated with this patient not found.")
    end

    alt Phone number change allowed
        UpdateProfile -> UserDB : Check if phone number already exists
        UserDB --> UpdateProfile : No existing user with same phone number
        UpdateProfile -> UpdateProfile : Set new phone number on user
    else Phone number change not allowed
        UpdateProfile -> UpdateProfile : Throws Exception("A user with this phone number already exists.")
    end

    == Property Updates ==
    UpdateProfile -> UpdateProfile : Call UpdateProperties(patientDto, patientDataModel)
    UpdateProfile -> UpdateProfile : Call UpdateProperties(patientDto, user)
    
    alt Properties updated
        UpdateProfile -> PatientDB : Update patientDataModel
        UpdateProfile -> UserDB : Update user
        UpdateProfile -> EmailService : Send notifications if phone or emergency contact changed
        EmailService --> UpdateProfile : Email sent
    end

    UpdateProfile -> Mapper : Map updated patient to domain object
    Mapper --> UpdateProfile : updatedPatientDomainFinal
    UpdateProfile --> Patient : Return updated PatientDto

end
@enduml